import { Blueprint } from '@wp-playground/client';
import { makeBlueprint } from '../../make-blueprint';
import { parseBlueprint } from './router';

export async function resolveBlueprint(url: URL) {
	const query = url.searchParams;
	const fragment = decodeURI(url.hash || '#').substring(1);

	let blueprint: Blueprint;
	/*
	 * Support passing blueprints via query parameter, e.g.:
	 * ?blueprint-url=https://example.com/blueprint.json
	 */
	if (query.has('blueprint-url')) {
		const url = query.get('blueprint-url');
		const response = await fetch(url!, {
			credentials: 'omit',
		});
		blueprint = await response.json();
	} else if (fragment.length) {
		/*
		 * Support passing blueprints in the URI fragment, e.g.:
		 * /#{"landingPage": "/?p=4"}
		 */
		blueprint = parseBlueprint(fragment);
	}

	// If no blueprint was passed, prepare one based on the query params.
	// @ts-ignore
	if (typeof blueprint === 'undefined') {
		const features: Blueprint['features'] = {};
		/**
		 * Networking is disabled by default, so we only need to enable it
		 * if the query param is explicitly set to "yes".
		 */
		if (query.get('networking') === 'yes') {
			features['networking'] = true;
		}
		blueprint = makeBlueprint({
			php: query.get('php') || '8.0',
			wp: query.get('wp') || 'latest',
			theme: query.get('theme') || undefined,
			login: !query.has('login') || query.get('login') === 'yes',
			multisite: query.get('multisite') === 'yes',
			features,
			plugins: query.getAll('plugin'),
			landingPage: query.get('url') || undefined,
			phpExtensionBundles: query.has('php-extension-bundle')
				? query.getAll('php-extension-bundle')
				: ['kitchen-sink'],
			importSite: query.get('import-site') || undefined,
			importWxr:
				query.get('import-wxr') ||
				query.get('import-content') ||
				undefined,
			language: query.get('language') || undefined,
		});
	}

	if (!blueprint.preferredVersions) {
		blueprint.preferredVersions = {} as any;
	}

	// Allow overriding the preferred versions using query params
	// generated by the version switchers.
	if (query.get('php') || query.get('wp')) {
		blueprint.preferredVersions!.php =
			(query.get('php') as any) || blueprint.preferredVersions!.php;
		blueprint.preferredVersions!.wp =
			query.get('wp') || blueprint.preferredVersions!.wp;
	}

	/*
	 * The 6.3 release includes a caching bug where
	 * registered styles aren't enqueued when they
	 * should be. This isn't present in all environments
	 * but it does here in the Playground. For now,
	 * the fix is to define `WP_DEVELOPMENT_MODE = all`
	 * to bypass the style cache.
	 *
	 * @see https://core.trac.wordpress.org/ticket/59056
	 */
	if (blueprint.preferredVersions?.wp === '6.3') {
		blueprint.steps?.unshift({
			step: 'defineWpConfigConsts',
			consts: {
				WP_DEVELOPMENT_MODE: 'all',
			},
		});
	}

	return blueprint;
}
